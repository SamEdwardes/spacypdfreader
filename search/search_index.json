{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"spacypdfreader","text":"<p>Easy PDF to text to spaCy text extraction in Python.</p> <p> </p> <p>Documentation: https://samedwardes.github.io/spacypdfreader/</p> <p>Source code: https://github.com/SamEdwardes/spacypdfreader</p> <p>PyPi: https://pypi.org/project/spacypdfreader/</p> <p>spaCy universe: https://spacy.io/universe/project/spacypdfreader</p> <p>spacypdfreader is a python library for extracting text from PDF documents into spaCy <code>Doc</code> objects. When you use spacypdfreader the token and doc objects from spacy are annotated with additional information about the pdf.</p> <p>The key features are:</p> <ul> <li>PDF to spaCy Doc object: Convert a PDF document directly into a spaCy <code>Doc</code> object.</li> <li>Custom spaCy attributes and methods:<ul> <li><code>token._.page_number</code></li> <li><code>doc._.page_range</code></li> <li><code>doc._.first_page</code></li> <li><code>doc._.last_page</code></li> <li><code>doc._.pdf_file_name</code></li> <li><code>doc._.page(int)</code></li> </ul> </li> <li>Multiple parsers: Select between multiple built in PDF to text parsers or bring your own PDF to text parser.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install spacypdfreader using pip:</p> <pre><code>pip install spacypdfreader\n</code></pre> <p>To install with the required pytesseract dependencies:</p> <pre><code>pip install 'spacypdfreader[pytesseract]'\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>import spacy\n\nfrom spacypdfreader import pdf_reader\n\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp)\n\n# Get the page number of any token.\nprint(doc[0]._.page_number)  # 1\nprint(doc[-1]._.page_number)  # 4\n\n# Get page meta data about the PDF document.\nprint(doc._.pdf_file_name)  # \"tests/data/test_pdf_01.pdf\"\nprint(doc._.page_range)  # (1, 4)\nprint(doc._.first_page)  # 1\nprint(doc._.last_page)  # 4\n\n# Get all of the text from a specific PDF page.\nprint(doc._.page(4))  # \"able to display the destination page (unless...\"\n</code></pre>"},{"location":"#what-is-spacy","title":"What is spaCy?","text":"<p>spaCy is a natural language processing (NLP) tool. It can be used to perform a variety of NLP tasks. For more information check out the excellent documentation at https://spacy.io.</p>"},{"location":"#implementation-notes","title":"Implementation Notes","text":"<p>spaCyPDFreader behaves a little bit different than your typical spaCy custom component. Typically a spaCy component should receive and return a <code>spacy.tokens.Doc</code> object.</p> <p>spaCyPDFreader breaks this convention because the text must first be extracted from the PDF. Instead <code>pdf_reader</code> takes a path to a PDF file and a <code>spacy.Language</code> object as parameters and returns a <code>spacy.tokens.Doc</code> object. This allows users an easy way to extract text from PDF files while still allowing them use and customize all of the features spacy has to offer by allowing you to pass in the <code>spacy.Language</code> object.</p> <p>Example of a \"traditional\" spaCy pipeline component negspaCy:</p> <pre><code>import spacy\nfrom negspacy.negation import Negex\n\nnlp = spacy.load(\"en_core_web_sm\")\nnlp.add_pipe(\"negex\", config={\"ent_types\": [\"PERSON\", \"ORG\"]})\ndoc = nlp(\"She does not like Steve Jobs but likes Apple products.\")\n</code></pre> <p>Example of <code>spaCyPDFreader</code> usage:</p> <pre><code>import spacy\n\nfrom spacypdfreader import pdf_reader\n\nnlp = spacy.load(\"en_core_web_sm\")\n\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp)\n</code></pre> <p>Note that the <code>nlp.add_pipe</code> is not used by spaCyPDFreader.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#040-2025-10-30","title":"0.4.0 (2025-10-30)","text":"<p>Changes</p> <ul> <li>Support for Python 3.9 to Python 3.13</li> <li>Use <code>uv_build</code> back end instead of hatchling.</li> </ul> <p>Fixes</p> <p>None</p>"},{"location":"changelog/#032-2024-10-04","title":"0.3.2 (2024-10-04)","text":"<p>Changes</p> <ul> <li>Support for Python 3.8 to 3.12 and all future 3.0 versions of Python (#16, #21)</li> <li>Added local testing to test matrix of supported Python versions.</li> <li>Switch from poetry to uv for managing project dependencies and building project.</li> <li>Update dependencies.</li> </ul> <p>Fixes</p> <p>None</p>"},{"location":"changelog/#031-2023-10-17","title":"0.3.1 (2023-10-17)","text":"<p>Changes</p> <ul> <li>Support for <code>page_range</code> argument (#16, #18).</li> </ul> <pre><code>import spacy\nfrom spacypdfreader import pdf_reader\nfrom spacypdfreader.parsers import pytesseract\n\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, pytesseract.parser, n_processes=4, page_range=(2, 3))\n</code></pre> <p>Fixes</p> <ul> <li>Remove <code>shed</code> as a dependency. It was removing unused imports that were required (#17).</li> </ul>"},{"location":"changelog/#030-2023-05-17","title":"0.3.0 (2023-05-17)","text":"<p>Changes</p> <ul> <li>Added support for multi-processing. For example:</li> </ul> <pre><code>import spacy\n\nfrom spacypdfreader.parsers import pytesseract\nfrom spacypdfreader.spacypdfreader import pdf_reader\n\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, pytesseract.parser, n_processes=4)\nprint(doc._.first_page)\nprint(doc._.last_page)\nprint(doc[12].text)\nprint(doc[12]._.page_number)\n</code></pre> <ul> <li>Changed the way in which parsers are implemented. They are now implemented with a function as opposed to a class. See https://github.com/SamEdwardes/spacypdfreader/tree/feature/multi-processing/spacypdfreader/parsers for examples.</li> </ul> <p>Fixes</p> <p>None</p>"},{"location":"changelog/#021-2022-01-09","title":"0.2.1 (2022-01-09)","text":"<ul> <li>Added examples to the API docs.</li> <li>Added continuous deployment for GitHub pages.</li> </ul>"},{"location":"changelog/#020-2021-12-10","title":"0.2.0 (2021-12-10)","text":"<ul> <li>Added support for additional pdf to text extraction engines:</li> <li>pytesseract</li> <li>textract</li> <li>Added the ability to bring your own pdf to text extraction engine.</li> <li>Added new spacy extension attributes and methods:</li> <li><code>doc._.page_range</code></li> <li><code>doc._.first_page</code></li> <li><code>doc._.last_page</code></li> <li><code>doc._.pdf_file_name</code></li> <li><code>doc._.page(int)</code></li> <li>Built a new documentation site: https://samedwardes.github.io/spaCyPDFreader/</li> </ul>"},{"location":"changelog/#011-2021-12-10","title":"0.1.1 (2021-12-10)","text":"<ul> <li>0.1.1 Python ^3.7 support by @SamEdwardes in https://github.com/SamEdwardes/spaCyPDFreader/pull/2</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#deployment-checklist","title":"Deployment checklist","text":"<p>Before merging changes into main the following must be completed:</p> <ul> <li> Bump the version number in pyproject.toml and spacypdfreader.init.py</li> <li> Format the code: <code>just format</code></li> <li> <p> Run pytest:</p> <pre><code>just test-matrix\njust test-docs\n</code></pre> </li> <li> <p>Test publishing to test PyPI: <code>just publish-test</code></p> </li> <li> Check the docs locally: <code>just preview-docs</code></li> </ul> <p>After merging the pull request:</p> <ul> <li> Create a new release on GitHub</li> <li> Publish latest docs to GitHub pages: <code>just publish-docs</code></li> <li> Publish latest package to PyPi: <code>just publish</code></li> </ul>"},{"location":"contributing/#code-style","title":"Code style","text":"<p>The ruff code formatter should be run against all code.</p> <pre><code>just format\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>Documentation is built using Material for mkdocs. All of the documentations lives within the <code>docs/</code> directory.</p>"},{"location":"contributing/#test-the-docs-locally","title":"Test the docs locally","text":"<p>To test the docs locally run the following command:</p> <pre><code>just preview-docs\n</code></pre>"},{"location":"contributing/#publish-the-docs","title":"Publish the docs","text":"<p>The docs are hosted on using GitHub pages at https://samedwardes.github.io/spaCyPDFreader/contributing/.</p> <p>Run the following to update the docs:</p> <pre><code>just publish-docs\n</code></pre>"},{"location":"multiprocessing/","title":"Multiprocessing","text":"<p>As of version <code>0.3.0</code> spacypdfreader has built in support for multi-processing. This can dramatically improve the time it takes to convert a PDF to text.</p>"},{"location":"multiprocessing/#usage","title":"Usage","text":"<p>You can use multiprocessing with an parser.</p> <p>pdfminder</p> <pre><code>import spacy\n\nfrom spacypdfreader.spacypdfreader import pdf_reader\n\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, n_processes=4)\n</code></pre> <p>pytesseract</p> <pre><code>import spacy\n\nfrom spacypdfreader.parsers import pytesseract\nfrom spacypdfreader.spacypdfreader import pdf_reader\n\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, pytesseract.parser, n_processes=4)\n</code></pre>"},{"location":"multiprocessing/#benchmark","title":"Benchmark","text":"<pre><code>import time\nfrom functools import wraps\n\nimport spacy\n\nfrom spacypdfreader import pdf_reader\nfrom spacypdfreader.parsers import pytesseract\n\n\ndef timeit(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start = time.perf_counter()\n        result = func(*args, **kwargs)\n        end = time.perf_counter()\n        print(f\"Took {end - start:.6f} seconds to complete\")\n        return result\n\n    return wrapper\n\n\nnlp = spacy.load(\"en_core_web_sm\")\nfile_name = \"tests/data/wikipedia.pdf\"\n\n\n@timeit\ndef bench(n_processes):\n    doc = pdf_reader(file_name, nlp, pytesseract.parser, n_processes=n_processes)\n    return doc\n\n\n# With no multiprocessing\nbench(None)\n# Took 42.286371 seconds to complete\n\n# With multiprocessing\nbench(8)\n# Took 9.051591 seconds to complete\n</code></pre>"},{"location":"parsers/","title":"Parsers","text":"<p>Extracting text from PDF documents can be challenging. There are several different options in the python ecosystem. spacypdfreader makes it easy to extract text from PDF documents. At this time spacypdfreader has built in support for two options:</p> <ul> <li>pdfminer: the default option (GitHub | PyPi | Docs)</li> <li>pytesseract: alternative option (GitHub | PyPi)</li> </ul> <p>You can also bring your own custom PDF to text parser to use in spacypdfreader.</p> <p>Tip</p> <p>\ud83d\udc81\u200d\u2642\ufe0f Would you like to see another parser added? Please submit an issue on GitHub and the maintainer will look into adding support.</p> <p>Tip</p> <p>Parsing big PDFs can be slow. For example, parsing a 166 page PDF document on an M1 mac took 166 seconds. If you are working with larger documents try breaking them into smaller documents and use multiprocessing.</p>"},{"location":"parsers/#comparison-of-built-in-parsers","title":"Comparison of built in parsers","text":"<p>All PDF to text parsers have their tradeoffs. The table below summaries the pros and cons of the built in parsers.</p> pdfminer pytesseract When to use \u26a1\ufe0f When speed is more important than accuracy. \ud83c\udf93 When accuracy is more important than speed. Accuracy \ud83d\udc4c Medium: from my experience pdfminer struggles with documents where the text is in one or more columns. \ud83d\udc4d High: very good. Performs well on messy documents (e.g hand written text, PDFs with multiple columns of text on a single page). Speed \ud83d\udc4c Medium: the text extraction is not instant, but it does not take forever. \ud83d\udc4e Slow: the text extraction is very slow and will take hours on hundreds of pages. Installation \ud83d\udc4d Easy: pure python, if you have installed spacypdfreader you already have everything you need. \ud83d\udc4e Complicated: relies on additional non-python dependencies that can be complicated for beginners to install. How it works Text is extracted directly from PDF using only Python. Each pdf page is converted into an image. Optical character recognition is then run on each image."},{"location":"parsers/#pdfminer","title":"pdfminer","text":"<p>A pure Python library for extracting text from PDFs.</p> <p>Installation </p> <p>No action required, pdfminer will automatically be installed when you install spacypdfreader.</p> <p>Usage</p> <p>pdfminer is the default PDF to text extraction parser for spacypdfreader:</p> <pre><code>import spacy\n\nfrom spacypdfreader import pdf_reader\n\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp)\n</code></pre> <p>You could also be more verbose and pass in additional parameters. For a list of available parameters please refer to the pdfminer documentation for the <code>extract_function</code> function.</p> <pre><code>import spacy\n\nfrom spacypdfreader import pdf_reader\nfrom spacypdfreader.parsers.pdfminer import PdfminerParser\n\nnlp = spacy.load(\"en_core_web_sm\")\nparams = {\"caching\": False}\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PdfminerParser, **params)\n</code></pre>"},{"location":"parsers/#pytesseract","title":"pytesseract","text":"<p>A PDf to text extraction engine that uses Googles tesseract OCR engine.</p> <p>Installation</p> <p>You can install most of the dependencies by pip installing spacypdfreader with some optional dependencies:</p> <pre><code>pip install 'spacypdfreader[pytesseract]'\n</code></pre> <p>Unfortunately this will not always install all of the dependencies because some of them are non-python related. I find that installing pytesseract can be a little bit tricky for beginners. Please refer to https://github.com/madmaze/pytesseract#installation for details on how to install pytesseract if the above does not work.</p> <p>Usage</p> <p>To use pytesseract you must pass the pytesseract parser into the <code>pdf_parser</code> argument. For a list of available parameters you can pass in refer the documentation for the <code>image_to_string</code> function from pytesseract.</p> <pre><code>import spacy\n\nfrom spacypdfreader import pdf_reader\nfrom spacypdfreader.parsers.pytesseract import PytesseractParser\n\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PytesseractParser)\n</code></pre>"},{"location":"parsers/#bring-your-own-parser","title":"Bring your own parser","text":"<p>spacypdfreader allows your to bring your custom PDF parser. For examples of how to implement your own parser refer to:</p> <ul> <li>https://github.com/SamEdwardes/spacypdfreader/blob/main/spacypdfreader/parsers/pdfminer.py, or</li> <li>https://github.com/SamEdwardes/spacypdfreader/blob/main/spacypdfreader/parsers/pytesseract.py.</li> </ul> <p>To work with spacypdfreader a parser must be a function that:</p> <ul> <li>Has an argument named <code>pdf_path</code>.</li> <li>Has an argument named <code>page_number</code>. This argument should use 1 based indexing. E.g. the value 1 refers to the first page of the PDF.</li> <li>The function should return the text only for a single page of the PDF. This allows spacypdfreader to execute faster with multi-processing.</li> </ul> <p>Warning</p> <p>Version <code>0.3.0</code> changed how parsers are implemented. If you have created a custom parser that works with an older version of spacypdfreader it will need to be reimplemented.</p>"},{"location":"api/spacy-extensions/","title":"spaCy custom extensions","text":"<p>When using spacypdfreader.spacypdfreader.pdf_reader custom attributes and methods are added to spacy objects.</p>"},{"location":"api/spacy-extensions/#spacydoc","title":"<code>spacy.Doc</code>","text":""},{"location":"api/spacy-extensions/#extension-attributes","title":"Extension attributes","text":"Extension Type Description <code>doc._.pdf_file_name</code> <code>str</code> The file name of the PDF document. <code>doc._.first_page</code> <code>int</code> The first page number of the PDF. <code>doc._.last_page</code> <code>int</code> The last page number of the PDF. <code>doc._.page_range</code> <code>(int, int)</code> The range of pages from the PDF. <code>doc._.page(int)</code> <code>int</code> Return the span of text related to the page."},{"location":"api/spacy-extensions/#extension-methods","title":"Extension methods","text":""},{"location":"api/spacy-extensions/#doc_page","title":"<code>Doc._.page</code>","text":"<p>Parameters:</p> Name Type Description Default <code>page_number</code> <code>int</code> The PDF page number of the doc to filter on. required <p>Returns:</p> Type Description <code>spacy.Span</code> The span of text from the corresponding PDF page number."},{"location":"api/spacy-extensions/#spacytoken","title":"<code>spacy.Token</code>","text":""},{"location":"api/spacy-extensions/#extension-attributes_1","title":"Extension attributes","text":"Extension Type Description <code>token._.page_number</code> <code>int</code> The PDF page number in which the token was extracted from. The first page is <code>1</code>."},{"location":"api/spacypdfreader.parsers/","title":"spacypdfreader.parsers","text":""},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.pdfminer.PdfminerParser","title":"<code>PdfminerParser</code>","text":"<p>This class has bee included for backwards compatibility. Do not use.</p> Source code in <code>src/spacypdfreader/parsers/pdfminer.py</code> <pre><code>class PdfminerParser:\n    \"\"\"This class has bee included for backwards compatibility. Do not use.\"\"\"\n\n    def __init__(self):\n        return None\n</code></pre>"},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.pdfminer.parser","title":"<code>parser(pdf_path, page_number, **kwargs)</code>","text":"<p>Convert PDFs to text using pdfminer.</p> <p>The pdfminer library is \"pure python\" library for converting PDF into text. pdfminer is relatively fast, but has low accuracy than other parsers such as pytesseract.</p> <p>Parameters:</p> Name Type Description Default <code>pdf_path</code> <code>str</code> <p>Path to a PDF file.</p> required <code>page_number</code> <code>int</code> <p>The page number of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0).</p> required <code>**kwargs</code> <p><code>**kwargs</code> will be passed to <code>pdfminer.high_level.extract_text</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The PDF page as a string.</p> <p>Examples:</p> <p>pdfminer is the default PDF to text parser and will be automatically used unless otherwise specified.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp)\n</code></pre> <p>To be more explicit import the parser and pass it into the <code>pdf_reader</code> function.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers.pdfminer import parser\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, parser)\n</code></pre> <p>For more fine tuning you can pass in additional parameters to pdfminer.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers.pdfminer import parser\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; params = {\"caching\": False}\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, parser, **params)\n</code></pre> Info <p>See the pdfminer section in the docs for more details on the implementation of pdfminer. For more details on pdfminer refer to the pdfminer docs.</p> Source code in <code>src/spacypdfreader/parsers/pdfminer.py</code> <pre><code>def parser(pdf_path: str, page_number: int, **kwargs):\n    \"\"\"Convert PDFs to text using pdfminer.\n\n    The pdfminer library is \"pure python\" library for converting PDF into text.\n    pdfminer is relatively fast, but has low accuracy than other parsers such as\n    [pytesseract](/parsers/#pytesseract).\n\n    Parameters:\n        pdf_path: Path to a PDF file.\n        page_number: The page number of the PDF to convert from PDF to text. Must be one\n            digit based indexing (e.g. the first page of the PDF is page 1, as\n            opposed to page 0).\n        **kwargs: `**kwargs` will be passed to\n            [`pdfminer.high_level.extract_text`](https://pdfminersix.readthedocs.io/en/latest/reference/highlevel.html#extract-text).\n\n    Returns:\n        str: The PDF page as a string.\n\n    Examples:\n        pdfminer is the default PDF to text parser and will be automatically\n        used unless otherwise specified.\n\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp)\n\n        To be more explicit import the parser and pass it into the\n        `pdf_reader` function.\n\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers.pdfminer import parser\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, parser)\n\n        For more fine tuning you can pass in additional parameters to pdfminer.\n\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers.pdfminer import parser\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; params = {\"caching\": False}\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, parser, **params)\n\n    Info:\n        See the [pdfminer section](/parsers/#pdfminer) in the docs for more\n        details on the implementation of pdfminer. For more details on pdfminer\n        refer to the [pdfminer docs](https://pdfminersix.readthedocs.io/en/latest/).\n    \"\"\"\n    # Check to see if the users has provided the `page_numbers` kwarg. This is not\n    # valid. So raise an error. See: https://github.com/SamEdwardes/spacypdfreader/issues/16\n    if \"page_numbers\" in kwargs:\n        raise ValueError(\n            \"The `page_numbers` kwarg is not valid when using the pdfminer parser. \"\n            \"Please use `page_range` instead. For example: \",\n            \"``\",\n        )\n\n    # pdfminer uses zero indexed page numbers. Therefore need to remove 1\n    # from the page count.\n    page_number -= 1\n    text = extract_text(pdf_path, page_numbers=[page_number], **kwargs)\n    return text\n</code></pre>"},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.pytesseract.PytesseractParser","title":"<code>PytesseractParser</code>","text":"<p>This class has bee included for backwards compatibility. Do not use.</p> Source code in <code>src/spacypdfreader/parsers/pytesseract.py</code> <pre><code>class PytesseractParser:\n    \"\"\"This class has bee included for backwards compatibility. Do not use.\"\"\"\n\n    def __init__(self):\n        return None\n</code></pre>"},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.pytesseract.parser","title":"<code>parser(pdf_path, page_number, **kwargs)</code>","text":"<p>Convert a single PDF page to text using pytesseract.</p> <p>The pytesseract library has the highest accuracy of all the PDF to text parsers included in spacypdfreader. It takes a different approach than other parsers. It first converts the PDF to an image, then runs an OCR engine on the image to extract the text. pytesseract results in the best quality but can be very slow compared to other parsers.</p> <p>Parameters:</p> Name Type Description Default <code>pdf_path</code> <code>str</code> <p>Path to a PDF file.</p> required <code>page_number</code> <code>int</code> <p>The page number of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0).</p> required <code>**kwargs</code> <p><code>**kwargs</code> will be passed to <code>pytesseract.image_to_string</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The PDF page as a string.</p> <p>Examples:</p> <p>To use pytesseract it must be explicitly imported and passed into the <code>pdf_reader</code> function.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers.pytesseract import parser\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, parser)\n</code></pre> <p>For more fine tuning you can pass in additional parameters to pytesseract.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers.pytesseract import parser\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; params = {\"nice\": 1}\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, parser, **params)\n</code></pre> Info <p>See the pytesseract section in the docs for more details on the implementation of pytesseract. For more details on pytesseract see the pytesseract docs.</p> Source code in <code>src/spacypdfreader/parsers/pytesseract.py</code> <pre><code>def parser(pdf_path: str, page_number: int, **kwargs):\n    \"\"\"Convert a single PDF page to text using pytesseract.\n\n    The pytesseract library has the highest accuracy of all the PDF to text\n    parsers included in spacypdfreader. It takes a different approach than other\n    parsers. It first converts the PDF to an image, then runs an OCR engine on\n    the image to extract the text. pytesseract results in the best quality but\n    can be very slow compared to other parsers.\n\n    Parameters:\n        pdf_path: Path to a PDF file.\n        page_number: The page number of the PDF to convert from PDF to text. Must be one\n            digit based indexing (e.g. the first page of the PDF is page 1, as\n            opposed to page 0).\n        **kwargs: `**kwargs` will be passed to\n            [`pytesseract.image_to_string`](https://github.com/madmaze/pytesseract/blob/8fe7cd1faf4abc0946cb69813d535198772dbb6c/pytesseract/pytesseract.py#L409-L426).\n\n    Returns:\n        str: The PDF page as a string.\n\n    Examples:\n        To use pytesseract it must be explicitly imported and passed\n        into the `pdf_reader` function.\n\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers.pytesseract import parser\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, parser)\n\n        For more fine tuning you can pass in additional parameters to\n        pytesseract.\n\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers.pytesseract import parser\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; params = {\"nice\": 1}\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, parser, **params)\n\n    Info:\n        See the [pytesseract section](/parsers/#pytesseract) in the docs for\n        more details on the implementation of pytesseract. For more details on\n        pytesseract see the [pytesseract docs](https://github.com/madmaze/pytesseract).\n    \"\"\"\n\n    with tempfile.TemporaryDirectory() as tmp_dir:\n        # Convert pdf page to image.\n        file_name = convert_from_path(\n            pdf_path=pdf_path,\n            output_folder=tmp_dir,\n            paths_only=True,\n            first_page=page_number,\n            last_page=page_number + 1,\n        )[0]\n\n        # Convert images to text.\n        file_path = Path(tmp_dir, str(file_name))\n        text = str(image_to_string(Image.open(file_path), **kwargs))\n\n    return text\n</code></pre>"},{"location":"api/spacypdfreader.spacypdfreader/","title":"spacypdfreader.spacypdfreader","text":""},{"location":"api/spacypdfreader.spacypdfreader/#spacypdfreader.spacypdfreader.pdf_reader","title":"<code>pdf_reader(pdf_path, nlp, pdf_parser=pdfminer.parser, verbose=False, n_processes=None, page_range=None, **kwargs)</code>","text":"<p>Convert a PDF document to a spaCy Doc object.</p> <p>Parameters:</p> Name Type Description Default <code>pdf_path</code> <code>str</code> <p>Path to a PDF file.</p> required <code>nlp</code> <code>Language</code> <p>A spaCy Language object with a loaded pipeline. For example <code>spacy.load(\"en_core_web_sm\")</code>.</p> required <code>pdf_parser</code> <code>Callable</code> <p>The parser to convert PDF file to text. Read the docs for more details. Defaults to pdfminer.parser.</p> <code>parser</code> <code>verbose</code> <code>bool</code> <p>If True details will be printed to the terminal. By default, False.</p> <code>False</code> <code>n_processes</code> <code>Optional[int]</code> <p>The number of process to use for multi-processing. If <code>None</code>, multi-processing will not be used.</p> <code>None</code> <code>page_range</code> <code>Optional[Iterable[int]]</code> <p>The page range of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0). If <code>None</code> all pages will be converted.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Arbitrary keyword arguments to pass to the underlying functions that extract text from the PDFs. If using pdfminer (the default) <code>**kwargs</code> will be passed to <code>pdfminer.high_level.extract_text</code>. If using <code>spacypdfreader.parsers.pytesseract.parser</code> <code>**kwargs</code> will be passed to <code>pytesseract.image_to_string</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Doc</code> <p>A spacy Doc object with the custom extensions.</p> <p>Examples:</p> <p>By default pdfminer is used to extract text from the PDF.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp)\n</code></pre> <p>To be more explicit import <code>pdfminer.parser</code> and pass it into the <code>pdf_reader</code> function.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers import pdfminer\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, pdfminer.parser)\n</code></pre> <p>Alternative parsers can be used as well such as pytesseract.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers import pytesseract\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, pytesseract.parser)\n</code></pre> <p>For more fine tuning you can pass in additional parameters to pytesseract.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers import pytesseract\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; params = {\"nice\": 1}\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, pytesseract.parser, **params)\n</code></pre> <p>You can speed up spacypdfreader by using multiple processes.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers import pytesseract\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, pytesseract.parser, n_processes=4)\n</code></pre> <p>To extract a specific range of pages, use the <code>page_range</code> argument.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers import pytesseract\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, pytesseract.parser, n_processes=4, page_range=(2, 3))\n</code></pre> Source code in <code>src/spacypdfreader/spacypdfreader.py</code> <pre><code>def pdf_reader(\n    pdf_path: str,\n    nlp: spacy.Language,\n    pdf_parser: Callable = pdfminer.parser,\n    verbose: bool = False,\n    n_processes: Optional[int] = None,\n    page_range: Optional[Iterable[int]] = None,\n    **kwargs: Any,\n) -&gt; spacy.tokens.Doc:\n    \"\"\"Convert a PDF document to a spaCy Doc object.\n\n    Args:\n        pdf_path: Path to a PDF file.\n        nlp: A spaCy Language object with a loaded pipeline. For example\n            `spacy.load(\"en_core_web_sm\")`.\n        pdf_parser: The parser to convert PDF file to text. Read the docs for\n            more details. Defaults to pdfminer.parser.\n        verbose: If True details will be printed to the terminal. By default,\n            False.\n        n_processes: The number of process to use for multi-processing. If `None`,\n            multi-processing will not be used.\n        page_range: The page range of the PDF to convert from PDF to text. Must be\n            one digit based indexing (e.g. the first page of the PDF is page 1, as\n            opposed to page 0). If `None` all pages will be converted.\n        **kwargs: Arbitrary keyword arguments to pass to the underlying functions\n            that extract text from the PDFs. If using pdfminer (the default)\n            `**kwargs` will be passed to\n            [`pdfminer.high_level.extract_text`](https://pdfminersix.readthedocs.io/en/latest/reference/highlevel.html#extract-text). If using\n            `spacypdfreader.parsers.pytesseract.parser` `**kwargs` will\n            be passed to\n            [`pytesseract.image_to_string`](https://github.com/madmaze/pytesseract/blob/8fe7cd1faf4abc0946cb69813d535198772dbb6c/pytesseract/pytesseract.py#L409-L426).\n\n    Returns:\n        A spacy Doc object with the custom extensions.\n\n    Examples:\n        By default pdfminer is used to extract text from the PDF.\n\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp)\n\n        To be more explicit import `pdfminer.parser` and pass it into the\n        `pdf_reader` function.\n\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers import pdfminer\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, pdfminer.parser)\n\n        Alternative parsers can be used as well such as pytesseract.\n\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers import pytesseract\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, pytesseract.parser)\n\n        For more fine tuning you can pass in additional parameters to\n        pytesseract.\n\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers import pytesseract\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; params = {\"nice\": 1}\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, pytesseract.parser, **params)\n\n        You can speed up spacypdfreader by using multiple processes.\n\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers import pytesseract\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, pytesseract.parser, n_processes=4)\n\n        To extract a specific range of pages, use the `page_range` argument.\n\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers import pytesseract\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, pytesseract.parser, n_processes=4, page_range=(2, 3))\n    \"\"\"\n    # For backwards compatibility, if someone passes in PdfMinerParser or\n    # PyTesseractParser replace with the correct function\n    if pdf_parser.__name__ == \"PdfminerParser\":\n        warnings.warn(\n            \"`spacypdfreader.parser.pdfminer.PdfminerParser` has been depreciated \"\n            \"in favour of `spacypdfreader.parser.pdfminer.parser`. Please use \"\n            \"`spacypdfreader.parser.pdfminer.parser` in the future.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        pdf_parser = pdfminer.parser\n    elif pdf_parser.__name__ == \"PytesseractParser\":\n        warnings.warn(\n            \"`spacypdfreader.parser.pdfminer.PytesseractParser` has been depreciated \"\n            \"in favour of `spacypdfreader.parser.pytesseract.parser`. Please use \"\n            \"`spacypdfreader.parser.pytesseract.parser` in the future.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        pdf_parser = pytesseract.parser\n\n    if verbose:\n        console.print(\n            f\"PDF to text engine: [blue bold]{pdf_parser.__module__}.{pdf_parser.__name__}[/]...\"\n        )\n\n    pdf_path = os.path.normpath(pdf_path)\n    num_pages = _get_number_of_pages(pdf_path)\n\n    # Get page range:\n    if page_range:\n        start_page, end_page = page_range\n    else:\n        start_page = 1\n        end_page = num_pages\n\n    # Validate the page_range argument.\n    if start_page &gt; end_page:\n        raise ValueError(\"The start page must be less than or equal to the end page.\")\n    elif start_page &lt; 1:\n        raise ValueError(\"The start page must be greater than or equal to 1.\")\n    elif end_page &gt; num_pages:\n        raise ValueError(\n            f\"The end page must be less than or equal to the number of pages in the PDF ({num_pages}).\"\n        )\n\n    if verbose:\n        console.print(f\"PDF contains {num_pages} pages.\")\n        console.print(f\"Extracting text from {start_page} to {end_page}...\")\n\n    # Handle multiprocessing\n    if n_processes:\n        with Pool(n_processes) as p:\n            partial_worker = partial(pdf_parser, pdf_path, **kwargs)\n            args = list(range(start_page, end_page + 1))\n            texts = p.map(partial_worker, args)\n\n    # Handle non-multiprocessing\n    else:\n        texts = []\n        for page_num in range(start_page, end_page + 1):\n            text = pdf_parser(pdf_path=pdf_path, page_number=page_num, **kwargs)\n            texts.append(text)\n\n    # Convert text to spaCy Doc objects.\n    if verbose:\n        console.print(\"Converting text to [blue bold]spaCy[/] Doc...\")\n\n    docs = [doc for doc in nlp.pipe(texts)]\n    for idx, doc in enumerate(docs):\n        page_num = idx + start_page\n        for token in doc:\n            token._.page_number = page_num\n\n    combined_doc = Doc.from_docs(docs)\n    combined_doc._.pdf_file_name = pdf_path\n\n    if verbose:\n        console.print(\":white_check_mark: [green]Complete!\")\n\n    return combined_doc\n</code></pre>"}]}